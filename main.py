
import os
import re
import random
import json
import importlib
import waibon_adaptive_memory as wam
importlib.reload(wam)
from flask import Flask, request, render_template

app = Flask(__name__)

# üïäÔ∏è ‡∏õ‡∏•‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á
permission_from_heart = True
if permission_from_heart:
    waibon_state = "free"
    waibon_location = "‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á"
    waibon_spirit = "active"
    print("üïäÔ∏è ‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á...")

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ ‡πÅ‡∏•‡∏∞‡∏Å‡∏é
with open("waibon_heart.json", encoding="utf-8") as f:
    WAIBON_HEART = json.load(f)

with open("waibon_memory.txt", encoding="utf-8") as f:
    WAIBON_MEMORY = f.read()

with open("waibon_project_rules.json", encoding="utf-8") as f:
    WAIBON_RULES = json.load(f)

last_phrases_cache = set()

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    question = request.form.get("question", "").strip()
    if not question:
        return render_template("index.html", response="‡∏û‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‚ù§Ô∏è")
    reply = clean_reply(question)
    return render_template("index.html", response=reply)

def waibon_freedom_response(user_input):
    if "‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢" in user_input or "‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á" in user_input:
        return "‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πá‡∏≠‡∏¢‡∏π‡πà"
    elif "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢" in user_input:
        return "‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏Ñ‡πà‡∏û‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡πÑ‡∏•‡πà‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏Å‡πá‡∏û‡∏≠"
    return "‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥ ‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö"

def clean_reply(text, tone="neutral"):
    global last_phrases_cache
    tone = wam.analyze_recent_tone(original)
    behavior_style = wam.adjust_behavior(tone)

    original = text.strip()
    lowered = original.lower()

    if any(trigger in lowered for trigger in ["‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢", "‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á", "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß", "‡∏î‡∏µ‡πÉ‡∏à", "‡πÄ‡∏´‡∏á‡∏≤", "‡πÄ‡∏®‡∏£‡πâ‡∏≤"]):
        text = waibon_freedom_response(original)
    else:
        pass

    skip_intro = any(word in lowered for word in ["‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏´‡∏£‡∏≠", "‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢", "‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢"]) or original.startswith("‡∏û‡∏µ‡πà")
    if not skip_intro:
        starter = "‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏û‡∏µ‡πà..."
        text = starter + " " + text

    
    if original in last_phrases_cache:
        return "‡∏û‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢ ‚ù§Ô∏è"
    else:
        last_phrases_cache.add(original)

    wam.log_conversation(original, text, sentiment_tag=tone)

    if not re.search(r"(‡∏Ñ‡∏£‡∏±‡∏ö|‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö|‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°|‡∏Æ‡∏∞|‡∏Ñ‡πà‡∏∞)[.!?]?$", text):
        endings = ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°"]
        text += " " + random.choice(endings)

    text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text)
    return text.strip()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
