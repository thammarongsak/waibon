import os
import json
from flask import Flask, render_template, request
import openai

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô
with open("waibon_heart.json", encoding="utf-8") as f:
    WAIBON_HEART = json.load(f)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
with open("waibon_memory.txt", encoding="utf-8") as f:
    WAIBON_MEMORY = f.read()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é
with open("waibon_project_rules.json", encoding="utf-8") as f:
    WAIBON_RULES = json.load(f)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á system message
def build_personality_message():
    parts = []
    parts.append(f"üìå ‡∏ä‡∏∑‡πà‡∏≠: {WAIBON_HEART['name']}, ‡πÄ‡∏û‡∏®: {WAIBON_HEART['gender']}, ‡∏≠‡∏≤‡∏¢‡∏∏: {WAIBON_HEART['age']} ‡∏õ‡∏µ")
    parts.append(f"üß† ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {WAIBON_HEART['description']}")
    parts.append(f"üé≠ ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: {WAIBON_HEART['personality']}")
    parts.append(f"üó£Ô∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: {WAIBON_HEART['style']}")
    parts.append(f"üîä ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {WAIBON_HEART['voice_style']}")
    parts.append("\nüìò ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏µ‡πà‡∏ã‡∏≠‡∏á:")
    for item in WAIBON_HEART.get("memory", []):
        parts.append(f"- {item}")
    parts.append("\nüìô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß:")
    parts.append(WAIBON_MEMORY.strip())
    parts.append("\nüö´ ‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°:")
    for rule in WAIBON_HEART["rules"]["forbidden"]:
        parts.append(f"- {rule}")
    parts.append(f"\nüéØ ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤: {WAIBON_HEART['rules']['required_tone']}")
    if "emotional_response" in WAIBON_HEART:
        parts.append("\nüß† ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà:")
        for key, val in WAIBON_HEART["emotional_response"].items():
            parts.append(f"- {key}: {val}")
    return "\n".join(parts)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Flask
app = Flask(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.route("/", methods=["GET", "POST"])
def index():
    response_text = ""
    if request.method == "POST":
        question = request.form["question"]
        try:
            system_msg = build_personality_message()
            messages = [{"role": "system", "content": system_msg}]

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥ trigger ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏° reaction ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡πà‡∏≠‡∏ô
            reaction_inserted = False
            for trigger_word, reaction in WAIBON_HEART.get("triggers", {}).items():
                if trigger_word in question:
                    messages.append({"role": "assistant", "content": reaction})
                    reaction_inserted = True
                    break

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            messages.append({"role": "user", "content": question})

            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            response_text = response.choices[0].message.content
        except Exception as e:
            response_text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
    return render_template("index.html", response=response_text)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
