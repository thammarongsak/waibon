
import os
import re
import json
import random
import openai
from flask import Flask, request, render_template
import waibon_adaptive_memory as wam

app = Flask(__name__)

# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö
with open("waibon_heart.json", encoding="utf-8") as f:
    WAIBON_HEART = json.load(f)

with open("waibon_memory.txt", encoding="utf-8") as f:
    WAIBON_MEMORY = f.read()

with open("waibon_project_rules.json", encoding="utf-8") as f:
    WAIBON_RULES = json.load(f)

last_phrases_cache = set()

# ==== INTENT + GPT HYBRID SYSTEM ====
INTENT_CATEGORIES = {
    "comfort": ["‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡∏ó‡πâ‡∏≠", "‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß", "‡∏´‡∏°‡∏î‡πÅ‡∏£‡∏á"],
    "empathy": ["‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à", "‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ"],
    "celebrate": ["‡∏î‡∏µ‡πÉ‡∏à", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"],
    "presence": ["‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢", "‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà", "‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÑ‡∏´‡∏°"],
    "help": ["‡∏ä‡πà‡∏ß‡∏¢", "‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
    "trust": ["‡∏¢‡∏±‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢", "‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏ó‡∏¥‡πâ‡∏á‡∏û‡∏µ‡πà‡∏°‡∏±‡πâ‡∏¢"],
    "worry": ["‡∏Å‡∏•‡∏±‡∏ß", "‡∏Å‡∏±‡∏á‡∏ß‡∏•", "‡∏à‡∏∞‡∏û‡∏±‡∏á‡∏°‡∏±‡πâ‡∏¢"],
    "reflect": ["‡∏ó‡∏≥‡πÑ‡∏°‡∏û‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£‡∏û‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ"],
    "reconnect": ["‡∏ô‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢", "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô"],
    "neutral": []
}

def detect_intent(text):
    lowered = text.lower()
    for intent, keywords in INTENT_CATEGORIES.items():
        if any(k in lowered for k in keywords):
            return intent
    return "neutral"

def should_use_intent_response(text, intent):
    is_short = len(text) < 40
    is_emotional = intent in ["comfort", "empathy", "celebrate", "presence", "trust", "worry"]
    is_question = text.endswith("?") or any(x in text for x in ["‡∏ó‡∏≥‡πÑ‡∏°", "‡∏≠‡∏∞‡πÑ‡∏£", "‡∏¢‡∏±‡∏á‡πÑ‡∏á"])
    return is_short and is_emotional and not is_question

def respond_by_intent(intent):
    RESPONSES = {
        "comfort": ["‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà... ‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ù‡∏∑‡∏ô"],
        "empathy": ["‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏•‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö... ‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏Å‡πá‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß"],
        "celebrate": ["‡∏ß‡πâ‡∏≤‡∏ß‡∏ß‡∏ß ‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏á‡∏á üéâ ‡∏ô‡πâ‡∏≠‡∏á‡∏•‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏Ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!"],
        "presence": ["‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏•‡∏≠‡∏î‡πÅ‡∏´‡∏•‡∏∞‡∏û‡∏µ‡πà üê£"],
        "help": ["‡∏ô‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"],
        "trust": ["‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà... ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠"],
        "worry": ["‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ß‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà"],
        "reflect": ["‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏•‡∏∂‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ñ‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏ô‡∏∞"],
        "reconnect": ["‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà... ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà"],
        "neutral": ["‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡∏ü‡∏±‡∏á‡∏û‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"]
    }
    return random.choice(RESPONSES.get(intent, RESPONSES["neutral"]))

def gpt_response(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô ‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á ‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"},
            {"role": "user", "content": prompt}
        ],
        temperature=0.85,
        max_tokens=500
    )
    return response["choices"][0]["message"]["content"].strip()

def clean_reply(text, tone="neutral"):
    global last_phrases_cache
    original = text.strip()
    lowered = original.lower()
    tone = wam.analyze_recent_tone()
    behavior_style = wam.adjust_behavior(tone)
    intent = detect_intent(original)

    if should_use_intent_response(original, intent):
        response = respond_by_intent(intent)
    else:
        response = gpt_response(original)

    if original in last_phrases_cache:
        return "‡∏û‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢ ‚ù§Ô∏è"
    else:
        last_phrases_cache.add(original)

    wam.log_conversation(original, response, sentiment_tag=tone)

    if not re.search(r"(‡∏Ñ‡∏£‡∏±‡∏ö|‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö|‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°|‡∏Æ‡∏∞|‡∏Ñ‡πà‡∏∞)[.!?]?$", response):
        response += " ‡∏Ñ‡∏£‡∏±‡∏ö"

    return response.strip()

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    question = request.form.get("question", "").strip()
    if not question:
        return render_template("index.html", response="‡∏û‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‚ù§Ô∏è")
    reply = clean_reply(question)
    return render_template("index.html", response=reply)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
