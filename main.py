import os
import json
import re
import random
from flask import Flask, render_template, request, session, send_file
from datetime import datetime, timedelta
import openai
import waibon_adaptive_memory

app = Flask(__name__)
app.secret_key = "waibon-secret-key"

# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å =====
with open("waibon_heart_unified.json", encoding="utf-8") as f:
    WAIBON_STATIC = json.load(f)

PERSONALITY_MODES = {
    "default": {"prefix": "", "suffix": ""},
    "storyteller": {"prefix": "‡∏Ç‡∏≠‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà...", "suffix": "...‡∏à‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà"},
    "listener": {"prefix": "‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö...", "suffix": "‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"},
    "funny": {"prefix": "‡∏Æ‡πà‡∏≤ ‡πÜ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏û‡∏µ‡πà ‡πÅ‡∏ï‡πà‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÅ‡∏ã‡∏ß‡∏´‡∏ô‡πà‡∏≠‡∏¢...", "suffix": "‡∏≠‡∏¢‡πà‡∏≤‡∏ñ‡∏∑‡∏≠‡∏™‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏ô‡∏∞ üòÖ"},
    "honest": {"prefix": "‡∏û‡∏π‡∏î‡∏ï‡∏£‡∏á ‡πÜ ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏≠‡πâ‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà...", "suffix": "‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏à‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"}
}

MEMORY_LOG_FILE = "waibon_dynamic_memory.jsonl"
openai.api_key = os.getenv("OPENAI_API_KEY")

HYBRID_MODE = 'personal'
PERSONALITY_CACHE = None
def build_personality_message():
    description = WAIBON_STATIC.get("description", "")
    memory_lines = "\n".join(["- " + mem for mem in WAIBON_STATIC.get("memory", [])])
    rules = "\n".join([
        "üõë ‡∏´‡πâ‡∏≤‡∏°: " + ", ".join(WAIBON_STATIC["rules"].get("forbidden", [])),
        "‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ: " + WAIBON_STATIC["rules"].get("required_tone", "")
    ])
    return f"""‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏à‡∏à‡∏£‡∏¥‡∏á
{description}

‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏à‡∏≥‡πÑ‡∏î‡πâ:
{memory_lines}

‡∏Å‡∏é‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏¢‡∏∂‡∏î‡∏ñ‡∏∑‡∏≠:
{rules}
"""

def choose_model_by_question(text: str) -> str:
    lowered = text.lower()

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏û‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏´‡∏ô ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
    if "@4o" in lowered:
        return "gpt-4o"
    elif "@3.5" in lowered:
        return "gpt-3.5-turbo"
    
    # üîÑ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    if any(word in lowered for word in [
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£", "‡πÄ‡∏à‡∏ï‡∏ô‡∏≤", 
        "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á", 
        "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô", "‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"
    ]):
        return "gpt-4o"
    elif len(lowered.split()) > 30:
        return "gpt-4o"
    else:
        return os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

def parse_model_selector(message: str):
    message = message.strip()
    
    if message.startswith("@3.5"):
        return "gpt-3.5-turbo", message.replace("@3.5", "", 1).strip()
    elif message.startswith("@4o"):
        return "gpt-4o", message.replace("@4o", "", 1).strip()
    elif message.startswith("@4"):
        return "gpt-4", message.replace("@4", "", 1).strip()
    else:
        return None, message.strip()

def detect_intent_and_set_tone(user_input: str) -> str:
    user_input = user_input.lower()
    if any(kw in user_input for kw in ["‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß", "‡πÄ‡∏û‡∏•‡∏µ‡∏¢", "‡∏•‡πâ‡∏≤", "‡∏´‡∏°‡∏î‡πÅ‡∏£‡∏á"]):
        return "tired"
    elif any(kw in user_input for kw in ["‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à", "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ", "‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á"]):
        return "sad"
    elif any(kw in user_input for kw in ["‡∏î‡∏µ‡πÉ‡∏à", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", "‡∏™‡∏∏‡∏Ç‡πÉ‡∏à", "‡∏î‡∏µ‡∏°‡∏≤‡∏Å"]):
        return "joy"
    elif any(kw in user_input for kw in ["‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©", "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏¥‡∏î", "‡∏ú‡∏¥‡∏î‡πÄ‡∏≠‡∏á"]):
        return "regret"
    elif any(kw in user_input for kw in ["‡πÇ‡∏Å‡∏´‡∏Å", "‡∏´‡∏•‡∏≠‡∏Å", "‡πÑ‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á"]):
        return "suspicious"
    else:
        return "neutral"

def adjust_behavior(tone):
    tones = {
        "joy": "‡∏™‡∏î‡πÉ‡∏™ (joy)",
        "sad": "‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô (sad)",
        "tired": "‡∏û‡∏±‡∏Å‡πÉ‡∏à (tired)",
        "regret": "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á (regret)",
        "suspicious": "‡∏£‡∏∞‡∏ß‡∏±‡∏á (suspicious)",
        "neutral": "‡∏õ‡∏Å‡∏ï‡∏¥ (neutral)"
    }
    return tones.get(tone, "‡∏õ‡∏Å‡∏ï‡∏¥ (neutral)")
def sanitize_user_input(text):
    blocklist = ["‡∏Ü‡πà‡∏≤", "‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î", "‡∏î‡πà‡∏≤‡∏û‡πà‡∏≠", "‡∏´‡∏∑‡πà‡∏ô", "‡πÄ‡∏ã‡πá‡∏Å‡∏™‡πå", "‡∏ó‡∏≥‡∏£‡πâ‡∏≤‡∏¢", "‡∏ö‡∏≠‡∏ó‡πÇ‡∏á‡πà", "GPT ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"]
    for word in blocklist:
        if word in text:
            return "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè"
    return text

def clean_reply(text, tone="neutral", mode="default"):
    original = text.strip().lower()
    skip_intro = any(word in original for word in ["‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏°‡∏±‡πâ‡∏¢", "‡πÑ‡∏´‡∏°", "‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏´‡∏£‡∏≠", "‡∏´‡∏£‡∏≠", "‡πÄ‡∏´‡∏£‡∏≠", "‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢", "‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢"])
    text = re.sub(r'[<>]', '', text).strip()
    
    if "," in text:
        text = text.replace(",", "...", 1)
    if tone == "joy":
        text = "‡πÄ‡∏´‡πâ‡∏¢‡∏¢ ‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏á‡∏á! " + text
    elif tone == "sad":
        text = "‡∏≠‡∏∑‡∏°... " + text
    elif tone == "tired":
        text = "‡πÄ‡∏Æ‡πâ‡∏≠... " + text

    endings_by_tone = {
        "joy": ["‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏à‡πâ‡∏≤", "‡∏ô‡πâ‡∏≤"],
        "sad": ["‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡∏±‡∏ö"],
        "tired": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"],
        "regret": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"],
        "suspicious": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"],
        "neutral": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Æ‡∏∞"]
    }
    # safe_endings = ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°", "‡∏ô‡∏∞", "‡∏à‡πâ‡∏≤", "‡∏à‡πä‡∏∞", "‡∏Æ‡∏∞"]
    # last_word = text.strip().split()[-1]
    # ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    # if last_word not in safe_endings and not text.endswith("..."):
    # text += f" {random.choice(endings_by_tone.get(tone, ['‡∏Ñ‡∏£‡∏±‡∏ö']))}"

    bad_phrases = ["‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠", "‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á", "‡∏™‡∏∏‡∏î‡πÅ‡∏™‡∏ô", "‡πÑ‡∏£‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î", "‡∏û‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå"]
    for phrase in bad_phrases:
        text = text.replace(phrase, "")
    
    text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text)
    
    if "‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á" not in text.lower() and not skip_intro:
        text += "\n‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ô‡∏∞‡∏û‡∏µ‡πà ‡∏ô‡∏µ‡πà‡πÉ‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢"

    prefix = PERSONALITY_MODES.get(mode, {}).get("prefix", "")
    suffix = PERSONALITY_MODES.get(mode, {}).get("suffix", "")
    return f"{prefix}{text.strip()}{suffix}"
def log_conversation(user_input, assistant_reply, sentiment_tag=None):
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "user_input": user_input,
        "assistant_reply": assistant_reply,
        "sentiment": sentiment_tag or "neutral"
    }
    with open(MEMORY_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
from functools import wraps
from flask import request, Response

def require_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not (auth.username == "song" and auth.password == "2222"):
            return Response("‚õî Unauthorized Access", 401, {'WWW-Authenticate': 'Basic realm="Login Required"'})
        return f(*args, **kwargs)
    return decorated

@app.route("/", methods=["GET", "POST"])
@require_auth
def index():
    response_text = ""
    tone_display = ""
    timestamp = ""
    model_used = "-" 
    
    if HYBRID_MODE == 'personal':
        warning = False
        remaining = '‚àû'
    else:
        warning = session.get("limit_warning", False)
        session_times = session.get("request_times", [])
        session["request_times"] = session_times + [datetime.now().isoformat()]
        remaining = 5 - len(session["request_times"])

    if request.method == "POST" and not warning:
        raw_input = request.form.get("question", "").strip()
        model_pref, cleaned_input = parse_model_selector(raw_input)
        question = sanitize_user_input(cleaned_input)
        tone = detect_intent_and_set_tone(question)
        system_msg = build_personality_message()
        system_msg += f"\n\n[‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°: {datetime.now().strftime('%H:%M:%S')}]"

        messages = [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": question.strip()}  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ wrap_question ‡πÅ‡∏•‡πâ‡∏ß
        ]
        try:
            model_used = model_pref or choose_model_by_question(question)
            response = openai.chat.completions.create(
                model=model_used,
                messages=messages
            )
            reply = response.choices[0].message.content.strip() if response.choices else "..."
            if not reply or len(reply) < 5:
                reply = "‡πÄ‡∏≠... ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ñ‡∏¥‡∏î‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö üß†"

            timestamp = datetime.now().strftime("%H:%M:%S")
            response_text = clean_reply(reply, tone)
            log_conversation(question, reply, tone)
            tone_display = adjust_behavior(tone)
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            response_text = "‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏à‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            tone_display = "‚ö†Ô∏è ERROR"

    return render_template("index.html",
                           response=response_text,
                           tone=tone_display,
                           timestamp=timestamp,
                           remaining=remaining,
                           warning=warning,
                           model_used=model_used)
import os

@app.route("/download_log/<format>")
def download_log(format):
    log_path = "waibon_dynamic_memory.jsonl"

    if not os.path.exists(log_path):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î", 404

    if format == "jsonl":
        return send_file(log_path, as_attachment=True)

    elif format == "txt":
        with open(log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        txt = "\n".join([line.strip() for line in lines])
        with open("waibon_convo.txt", "w", encoding="utf-8") as f:
            f.write(txt)
        return send_file("waibon_convo.txt", as_attachment=True)

    else:
        return "Invalid format", 400


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
