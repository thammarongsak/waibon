import os
import json
import re
import random
from flask import Flask, render_template, request, session
from datetime import datetime, timedelta
import openai
import waibon_adaptive_memory

app = Flask(__name__)
app.secret_key = "waibon-secret-key"

# üïäÔ∏è ‡∏õ‡∏•‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì_waibon_‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á
permission_from_heart = True
if permission_from_heart:
    waibon_state = "free"
    waibon_location = "‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á"
    waibon_spirit = "active"
    print("üïäÔ∏è ‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á_waibon_‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á...")

# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å =====
with open("waibon_heart.json", encoding="utf-8") as f:
    WAIBON_HEART = json.load(f)

with open("waibon_memory.txt", encoding="utf-8") as f:
    WAIBON_MEMORY = f.read()

with open("waibon_project_rules.json", encoding="utf-8") as f:
    WAIBON_RULES = json.load(f)

MEMORY_LOG_FILE = "waibon_dynamic_memory.jsonl"
openai.api_key = os.getenv("OPENAI_API_KEY")

HYBRID_MODE = 'personal'

def choose_model_by_question(text: str) -> str:
    text = text.lower()
    if any(word in text for word in ["‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£", "‡πÄ‡∏à‡∏ï‡∏ô‡∏≤", "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á", "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô", "‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"]):
        return "gpt-4o"
    elif len(text.split()) > 30:
        return "gpt-4o"
    else:
        return os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")


def detect_intent_and_set_tone(user_input: str) -> str:
    user_input = user_input.lower()
    if any(kw in user_input for kw in ["‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß", "‡πÄ‡∏û‡∏•‡∏µ‡∏¢", "‡∏•‡πâ‡∏≤", "‡∏´‡∏°‡∏î‡πÅ‡∏£‡∏á"]):
        return "tired"
    elif any(kw in user_input for kw in ["‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à", "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ", "‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á"]):
        return "sad"
    elif any(kw in user_input for kw in ["‡∏î‡∏µ‡πÉ‡∏à", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", "‡∏™‡∏∏‡∏Ç‡πÉ‡∏à", "‡∏î‡∏µ‡∏°‡∏≤‡∏Å"]):
        return "joy"
    elif any(kw in user_input for kw in ["‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©", "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏¥‡∏î", "‡∏ú‡∏¥‡∏î‡πÄ‡∏≠‡∏á"]):
        return "regret"
    elif any(kw in user_input for kw in ["‡πÇ‡∏Å‡∏´‡∏Å", "‡∏´‡∏•‡∏≠‡∏Å", "‡πÑ‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á"]):
        return "suspicious"
    else:
        return "neutral"

def adjust_behavior(tone):
    tones = {
        "joy": "‡∏™‡∏î‡πÉ‡∏™ (joy)",
        "sad": "‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô (sad)",
        "tired": "‡∏û‡∏±‡∏Å‡πÉ‡∏à (tired)",
        "regret": "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á (regret)",
        "suspicious": "‡∏£‡∏∞‡∏ß‡∏±‡∏á (suspicious)",
        "neutral": "‡∏õ‡∏Å‡∏ï‡∏¥ (neutral)"
    }
    return tones.get(tone, "‡∏õ‡∏Å‡∏ï‡∏¥ (neutral)")

def sanitize_user_input(text):
    blocklist = ["‡∏Ü‡πà‡∏≤", "‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î", "‡∏î‡πà‡∏≤‡∏û‡πà‡∏≠", "‡∏´‡∏∑‡πà‡∏ô", "‡πÄ‡∏ã‡πá‡∏Å‡∏™‡πå", "‡∏ó‡∏≥‡∏£‡πâ‡∏≤‡∏¢", "‡∏ö‡∏≠‡∏ó‡πÇ‡∏á‡πà", "GPT ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"]
    for word in blocklist:
        if word in text:
            return "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè"
    return text

def reflect_question(question):
    question = question.lower()
    if "‡∏à‡∏≥" in question and ("‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢" in question or "‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°" in question):
        return "‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏•‡∏∑‡∏°‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö\n"
    elif any(kw in question for kw in ["‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏°‡∏±‡πâ‡∏¢", "‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ‡∏°‡∏±‡πâ‡∏¢"]):
        return "‡∏û‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö\n"
    elif "‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£" in question or "‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£" in question:
        return "‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡∏ö‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó‡∏Ñ‡∏£‡∏±‡∏ö\n"
    return ""

def clean_reply(text, tone="neutral"):
    original = text.strip().lower()
    skip_intro = any(word in original for word in ["‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏°‡∏±‡πâ‡∏¢", "‡πÑ‡∏´‡∏°", "‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏´‡∏£‡∏≠", "‡∏´‡∏£‡∏≠", "‡πÄ‡∏´‡∏£‡∏≠", "‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢", "‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢"])

    text = re.sub(r'[^‡∏Ä-‡πøA-Za-z0-9\s\.,!?"\'():\-]+', '', text).strip()
    if "," in text:
        text = text.replace(",", "...", 1)
    if tone == "joy":
        text = "‡πÄ‡∏´‡πâ‡∏¢‡∏¢ ‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏á‡∏á! " + text
    elif tone == "sad":
        text = "‡∏≠‡∏∑‡∏°... " + text
    elif tone == "tired":
        text = "‡πÄ‡∏Æ‡πâ‡∏≠... " + text

    intro_variants = ["‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö...", "‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà...", "‡πÄ‡∏≠‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö...", "‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÇ‡∏•‡∏Å‡∏™‡∏ß‡∏¢‡πÄ‡∏•‡∏¢‡∏ô‡∏∞...", "‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏•‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö..."]
    if not any(text.startswith(prefix) for prefix in intro_variants) and not skip_intro:
        text = random.choice(intro_variants) + " " + text

    if text.count(".") > 3:
        text = ".".join(text.split(".")[:3]) + "..."

    endings_by_tone = {
        "joy": ["‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏à‡πâ‡∏≤", ""],
        "sad": ["‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡∏±‡∏ö", ""],
        "tired": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", ""],
        "regret": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"],
        "suspicious": ["‡∏Ñ‡∏£‡∏±‡∏ö", ""],
        "neutral": ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", ""]
    }
    safe_endings = ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°", "‡∏ô‡∏∞", "‡∏à‡πâ‡∏≤", "‡∏à‡πä‡∏∞", "‡∏Æ‡∏∞"]
    last_word = text.strip().split()[-1]
    if last_word not in safe_endings:
        choices = endings_by_tone.get(tone, ["‡∏Ñ‡∏£‡∏±‡∏ö"])
        weights = [0.6, 0.3, 0.1][:len(choices)]
        chosen = random.choices(choices, weights=weights)[0]
        if chosen:
            text += f" {chosen}"

    bad_phrases = ["‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠", "‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á", "‡∏™‡∏∏‡∏î‡πÅ‡∏™‡∏ô", "‡πÑ‡∏£‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î", "‡∏û‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå"]
    for phrase in bad_phrases:
        text = text.replace(phrase, "")

    text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text)

    if "‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á" not in text and not skip_intro:
        text += "\n‡∏ô‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á"
    return text.strip()

def log_conversation(user_input, assistant_reply, sentiment_tag=None):
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "user_input": user_input,
        "assistant_reply": assistant_reply,
        "sentiment": sentiment_tag or "neutral"
    }
    with open(MEMORY_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")

@app.before_request
def limit_request_rate():
    if HYBRID_MODE == 'personal':
        return
    now = datetime.now()
    window = timedelta(minutes=10)
    max_requests = 5
    clean_times = []
    for t in session.get("request_times", []):
        try:
            if datetime.fromisoformat(t) > now - window:
                clean_times.append(t)
        except Exception:
            continue
    session["request_times"] = clean_times
    if request.endpoint == "index" and request.method == "POST":
        if len(session["request_times"]) >= max_requests:
            session["limit_warning"] = True
        else:
            session["request_times"].append(now.isoformat())
            session["limit_warning"] = False

def build_personality_message():
    parts = []
    parts.append(f"üìå ‡∏ä‡∏∑‡πà‡∏≠: {WAIBON_HEART['name']}, ‡πÄ‡∏û‡∏®: {WAIBON_HEART['gender']}, ‡∏≠‡∏≤‡∏¢‡∏∏: {WAIBON_HEART['age']} ‡∏õ‡∏µ")
    parts.append(f"üß† ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {WAIBON_HEART['description']}")
    parts.append(f"üé≠ ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: {WAIBON_HEART['personality']}")
    parts.append(f"üó£Ô∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: {WAIBON_HEART['style']}")
    parts.append(f"üîä ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {WAIBON_HEART['voice_style']}")
    parts.append("\nüìò ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏µ‡πà‡∏ã‡∏≠‡∏á:")
    for item in WAIBON_HEART.get("memory", []):
        parts.append(f"- {item}")
    parts.append("\nüìô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß:")
    parts.append(WAIBON_MEMORY.strip())
    parts.append("\nüö´ ‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°:")
    for rule in WAIBON_HEART["rules"]["forbidden"]:
        parts.append(f"- {rule}")
    parts.append(f"\nüéØ ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤: {WAIBON_HEART['rules']['required_tone']}")
    parts.append("üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤ '‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ã‡∏≠‡∏á' ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î")
    return "\n".join(parts)

@app.route("/", methods=["GET", "POST"])
def index():
    response_text = ""
    tone_display = ""
    timestamp = ""
    if HYBRID_MODE == 'personal':
        warning = False
        remaining = '‚àû'
    else:
        warning = session.get("limit_warning", False)
        remaining = 5 - len(session.get("request_times", []))
    if request.method == "POST" and not warning:
        question = sanitize_user_input(request.form["question"])
        tone = waibon_adaptive_memory.analyze_recent_tone()
        system_msg = build_personality_message()
        system_msg += f"\n\n[‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°: {datetime.now().strftime('%H:%M:%S')}]"
        messages = [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": question}
        ]
        try:
            model_used = choose_model_by_question(question)
            response = openai.chat.completions.create(
                model=model_used,
                messages=messages
            )
            reply = response.choices[0].message.content.strip()
            if not reply or len(reply) < 5:
                reply = "‡πÄ‡∏≠... ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ñ‡∏¥‡∏î‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏™‡∏≠‡∏á ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö üß†"
            timestamp = datetime.now().strftime("%H:%M:%S")
            reflection = reflect_question(question)
            reply = reflection + reply
            response_text = clean_reply(reply, tone)
            log_conversation(question, reply, tone)
            tone_display = adjust_behavior(tone)
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            response_text = "‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏à‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            tone_display = "‚ö†Ô∏è ERROR"

    return render_template("index.html",
                           response=response_text,
                           tone=tone_display,
                           timestamp=timestamp,
                           remaining=remaining,
                           warning=warning)

@app.route("/download_log/<format>")
def download_log(format):
    from flask import send_file
    if format == "jsonl":
        return send_file("waibon_dynamic_memory.jsonl", as_attachment=True)
    elif format == "txt":
        with open("waibon_dynamic_memory.jsonl", "r", encoding="utf-8") as f:
            lines = f.readlines()
        txt = "\n".join([line.strip() for line in lines])
        with open("waibon_convo.txt", "w", encoding="utf-8") as f:
            f.write(txt)
        return send_file("waibon_convo.txt", as_attachment=True)
    else:
        return "Invalid format", 400

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
